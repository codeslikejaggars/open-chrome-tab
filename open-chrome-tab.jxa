#!/usr/bin/env osascript -l JavaScript

// issues:
// - URL handling (can't open a tab with a protocol-less url)
ObjC.import('stdio');
ObjC.import('stdlib');

function run(argv) {
  var url = argv[0];
  var chrome = Application('Google Chrome');
  var lastTab = findTabById(chrome, getLastTabId());

  var window, tab, tabIndex;
  // handle no chrome windows
  if(chrome.windows.length === 0) {
    window = chrome.Window().make();
    tab = window.tabs[0];
    tabIndex = 1;

  // tab still open from last time
  } else if(lastTab) {
    window = lastTab.window;
    tab = lastTab.tab;
    tabIndex = lastTab.tabIndex;

  // create a new tab
  } else {
    window = chrome.windows[0];
    window.tabs.push(tab = chrome.Tab());
    tabIndex = window.tabs.length;
  }

  tab.url.set(url);
  window.activeTabIndex.set(tabIndex);
  rememberTab(tab);

  // push window id and tab id to stdout
  $.printf('%s:%s', window.id(), tab.id());
  $.exit(0);
}

function findTabById(chrome, tabId) {
  if(!chrome || chrome.windows.length === 0 || !tabId) return;

  for(var windowIndex = 0; windowIndex < chrome.windows.length; windowIndex++) {
    var eachWindow = chrome.windows[windowIndex];
    for(var tabIndex = 0; tabIndex < eachWindow.tabs.length; tabIndex++) {
      var eachTab = eachWindow.tabs[tabIndex];

      if(eachTab.id() === tabId) {
        return {
          // NOTE: if get() isn't used here the values will change with the in focus window
          window : eachWindow.get(),
          tab : eachTab.get(),
          tabIndex : tabIndex + 1
        };
      }
    }
  }
}

var PLIST_PATH = '/tmp/open-chrome-tab.plist';

function rememberTab(tab) {
  $.NSDictionary.dictionaryWithDictionary({ tabId : tab.id() })
    .writeToFileAtomically(PLIST_PATH, true);
}

function getLastTabId() {
  var plist = $.NSDictionary.dictionaryWithContentsOfFile(PLIST_PATH);
  return ObjC.unwrap(plist.valueForKey( 'tabId' ));
}
